import React from 'react';
import Phraser from 'phraser';
import Lexicon from './Lexicon';

const {
    Adjective,
    AdjectivePhrase,
    AdverbClause,
    Clause,
    Noun,
    NounPhrase,
    Preposition,
    PrepositionPhrase,
    Sentence,
    SubordinatingConjunction,
    Verb,
    VerbPhrase,
    WordMeta,
    AP,
    Det,
    NP,
    PP,
    VP
} = Phraser(Lexicon);

// const nouns = [
//     {
//     }
// ];

// Noun.lexicon(nouns);


export default (props) => {
    var sentences = [];

    sentences.push('<h4>Suburb Ranking</h4>');
    sentences.push('<p>e.g. <em>"Richmond ranks 4th for supply and demand metrics when comparing all suburbs in Victoria."</em></p>');
    sentences.push(() => {
        const filter = AdverbClause(
            SubordinatingConjunction("when"),
            null,
            VerbPhrase(Verb("comparing")),
            NounPhrase(Noun("suburbs"))
                .determiner("all")
                .modifier(PrepositionPhrase(
                    Preposition("in"),
                    NounPhrase(Noun(WordMeta("Victoria", {color: "green"})) // EXAMPLE passing objects through as a word to facilitate word meta data and rich rendering on front end
                ))
            )
        );

        const sentence = Sentence(
            Clause(
                NounPhrase(Noun("Richmond")),
                VerbPhrase(Verb("ranks")), // TODO verb tenses so this can just be "rank"
                AdjectivePhrase(Adjective("4th")) // TODO some kind of helper class that can use numeral and turn numbers to ordered numbers
            )
                .modifier(PrepositionPhrase(
                    Preposition("for"),
                    NounPhrase(Noun("supply and demand metrics")) // TODO noun adjuncts to describe SUPPLY AND DEMAND metrics
                ))
                .modifier(filter)
        ).renderString();

        return sentence;
    });

    sentences.push('<p>...the same thing written shorthand...</p>');
    sentences.push(() => {
        const comparisonNoun = NP("suburbs")
            .det("all")
            .modifier(PP("in", "Victoria"));

        const sentence = Sentence(
            Clause(
                "Richmond",
                "ranks", // TODO verb tenses so this can just be "rank"
                AP("4th") // TODO some kind of helper class that can use numeral and turn numbers to ordered numbers
            )
                .modifier(PP("for", "supply and demand metrics"))
                .modifier(AdverbClause("when", null, "comparing", comparisonNoun))
        ).renderString();

        return sentence;
    });

    sentences.push('<h4>Supply Trends</h4>');
    sentences.push('<p>e.g. <em>"Hawthorn\'s supply has been trending slightly upward looking at the last 6 months."</em></p>');
    sentences.push(() => {
        const sentence = Sentence(
            Clause(
                NP("supply").det("Hawthorn's"), // TODO separate type or method for possessive determiners
                VP("trending").adverb("slightly upward") // TODO add verb dictionary and "has been"
                // ^ TODO add degree as a type for "very" etc.
            )
                .modifier(PP("looking at", NP("month").det(Det("the last").quantity(6))))
        ).renderString();

        return sentence;
    });

    sentences.push('<p>e.g. <em>"The average number of listings is 22 which is 12% higher than the state average."</em></p>');
    sentences.push(() => {
        const sentence = Sentence(
            Clause(
                NP("average number").the().modifier(PP("of", "listings")),
                VP("is")
                // ^ TODO add degree as a type for "very" etc.
            )
                .modifier(PP("looking at", NP("month").det(Det("the last").quantity(6))))
        ).renderString();

        return sentence;
    });





    sentences.forEach(ii => {
        if(typeof ii == "function") {
            console.log(ii());
        }
    });

    return <div>
        <h1>Phraser</h1>
        <p>Hello. This is not an autogenerated sentence. But perhaps someday it will be.</p>
        {sentences.map((ii, kk) => typeof ii == "function"
            ? <h3 style={{margin: '0 0 5rem'}} key={kk}>{ii()}</h3>
            : <span key={kk} dangerouslySetInnerHTML={{__html: ii}} />
        )}
    </div>;
}

